buildscript {
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
    id 'application'
    id 'com.github.vlsi.license-gather' version '1.77'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.namtium-oxide:namtium:2.0'
    implementation 'org.slf4j:slf4j-simple:1.7.33'
}

application {
    mainClass = 'launcher.Main'
}

project.version = '1.0';

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    "$buildDir/generated/java",
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    template {
        java {
            srcDirs = ['src/template/java']
        }
    }
}

task generateSources(type: Copy) {
    def vars = [
            'version': project.version,
            'name': project.name,
    ]
    inputs.properties vars
    from('src/template/java')
    into "$buildDir/generated/java"
    expand vars
}

compileJava.dependsOn generateSources

task generateLicense(type: com.github.vlsi.gradle.license.GatherLicenseTask) {
    configurations.add(project.configurations.runtimeClasspath)
}

jar {
    dependsOn generateLicense

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it);
        }
    }

    from(generateLicense) {
        into('META-INF/licenses')
    }

    exclude [
            'META-INF/*.SF',
            'META-INF/*.DSA',
            'META-INF/*.RSA',
            'META-INF/maven/**',
            'META-INF/LICENSE',
            'META-INF/NOTICE',
            'META-INF/DEPENDENCIES',
    ]
}

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn jar

    configuration 'proguard.cfg'

    injars jar
    outjars "$buildDir/libs/${project.name}-${project.version}-obfuscated.jar"
    printmapping "$buildDir/proguard.map"

    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        new File("${System.getProperty('java.home')}/jmods").listFiles().each {
            libraryjars it, jarfilter: '!**.jar', filter: '!module-info.class'
        }
    }
}

assemble.dependsOn proguard

task runObfuscated(type: JavaExec) {
    dependsOn proguard
    classpath proguard.outJarFiles[0]
}
